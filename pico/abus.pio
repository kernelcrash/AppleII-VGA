; wire Z80 _WR to the U4 LVC245 pin 16 which goes to GPIO pin 26 where the PHI0 would have gone. That means we pick up every write cycle
; wire Z80 _MREQ to the U4 LVC245 pin 17 (which was ~DEVSEL) which goes to GPIO pin 8
; wire Z80 _IORQ to the U4 LVC245 pin 18 (which was ~RW) which goes to GPIO pin 9
.define public _WR_GPIO 26

.program abus
; Prerequisites:
;  * Z80 _WR goes via LVC245 to GPIO 26
;  * JMP pin not used
;  * IN pins are mapped to _MREQ and _IORQ and Data[7:0]
;  * SET pins are mapped to the transceiver enable signals
;  * input shift left & autopush @ 26 bits
;  * run at about 252MHz (4ns/instruction)
;
; SET bits for tranceiver control:
;  0bxxx
;    x    - select AddrHi, active low
;     x   - select AddrLo, active low
;      x  - select Data, active low
.wrap_target
next_bus_cycle:
    set PINS, 0b011                     ; enable AddrHi tranceiver
    wait 0 GPIO, _WR_GPIO [5]          ; wait for _WR to go low. Data propagation through the transceiver should
                                        ; be complete by the time this happens.
    set PINS, 0b011 [5]                 ; enable AddrHi tranceiver

    ; the current time is P0+42ns (P0 + 18ns (buffer + clock input delays) + 2 clocks (input synchronizers) + 1 instruction)

    in PINS, 8                          ; read AddrHi[7:0]
    set PINS, 0b101  [5]                ; enable AddrLo tranceiver and delay for transceiver propagation delay
    in PINS, 8                          ; read AddrLo[7:0]

write_cycle:
    ; the current time is unknown

    set PINS, 0b110  [5]               ; enable Data tranceiver & wait until both _RFSH (connected to ~DEVSEL)  and the written data are valid (P0+200ns)
    in PINS, 10                         ; read R/W, _RFSH, and Data[7:0], then autopush
    wait 1 GPIO, _WR_GPIO  [7]         ; wait for _MREQ to rise
    jmp next_bus_cycle

.wrap
